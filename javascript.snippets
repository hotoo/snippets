# Comments
snippet /**
	/**
	 * ${1:@overview}
	 * @param {${2:String/Number/RegExp/Date/Function/Array/Object}} ${3}
	 * @return {${4:String/Number/RegExp/Date/Function/Array/Object}} ${5}
	 */${6}
snippet @param
	@param {${1:String/Number/RegExp/Date/Function/Array/Object}} ${2}
snippet @author
	@author ${1:`g:snips_author`}
snippet @version
	@version ${1:1.0}, ${2:`strftime("%Y/%m/%d")`}
snippet @dep
	@deprecated
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}){
		${4:// body...}
	};
# Function
snippet =function
	function (${1:args}) {
		${2:// body...}
	};
snippet :function
	function (${1:args}) {
		${2:// body...}
	};
snippet fun
	function ${1:function_name}(${2:args}){
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1:args}){${2:/* code */}}${3}
# if
snippet if
	if(${1:true}){${2}}
# if ... else
snippet ife
	if(${1:true}){${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}){
	case '${3:case}':
		${4:// code}
		break;${5}
	default:
		${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;${3}
# for (...) {...}
snippet forEach
	forEach(function(${1:value}, ${2:index}) {
		${3}
	});
snippet for
	for (var ${1:i}=0, ${2:l}=${3:list}.length; $1<$2; $1++) {
		${4:$3[$1]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet for-
	for (var ${1:i}=${2:list}.length-1; $1>=0; $1--) {
		${3:$2[$1]}
	}
snippet forin
	for (var ${1:k} in ${2:obj}) {
		${3:$2[$1]}
	}
# while (...) {...}
snippet wh
	while(${1:}){
		${2:/* code */}
	}
snippet while
	while(${1:}){
		${2:/* code */}
	}
# do...while
snippet do
	do{
		${2:/* code */}
	}while(${1:});
# try{...}catch(e){...}
snippet try
	try{
		${1:}
	}catch(${2:ex}){${3}}${4}
# Object Method
snippet :f
	${1:method_name}:function(${2:attribute}){
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function(){
		${2}
	}, ${1:25})${3};
snippet interval
	setInterval(${1:function}, ${2:25});${3}
# Get Element
snippet $
	document.getElementBy${1:Id}('${2}')${3}
snippet get
	document.getElementBy${1:Id}('${2}')${3}
# Get Elements
snippet gets
	document.getElementsBy${1:TagName}('${2}')${3}
snippet write
	document.write(${1:"text"})${2}
snippet enc escape
	escape(${1})
snippet enc encodeURI
	encodeURI(${1})
snippet enc encodeURIComponent
	encodeURIComponent(${1})
snippet log
	if(window.console && window.console.log){window.console.log(${1});}
snippet debug
	if(window.console && window.console.debug){window.console.debug(${1});}
snippet info
	if(window.console && window.console.info){window.console.info(${1});}
snippet warn
	if(window.console && window.console.warn){window.console.warn(${1});}
snippet err
	if(window.console && window.console.error){window.console.error(${1});}
snippet def
	define(function(require, exports, module) {
		${1}
	});

# ES6
snippet fun*
	function* ${1:function_name}(${2:args}) {
		yield ${3:value};
	}
snippet func*
	function* ${1:function_name}(${2:args}) {
		yield ${3:value};
	}
snippet function*
	function* ${1:function_name}(${2:args}) {
		yield ${3:value};
	}
snippet class
	class ${1:class_name} {
		constructor (${2:args}) {
			${3}
		}
	}
snippet forof
	for (let ${1:val} of ${2:sequence}) {
		${3:$1}
	}
snippet im
	import ${1:foo} from "${2:bar}"
snippet describe
	describe('${1:description}', function () {
		it('${2:testcase description}', function() {
			// object.should.be.eql('object');
			${3}
		});
	});
snippet it
	it('${1:testcase description}', function() {
		// object.should.be.eql('object');
		${2}
	});
